//****************************************************************************
// $Module type: Package
// $Module name: cDynamicReadOnlyGrid.pkg
// $Author     : Nils Svedmyr
// Created     : 2001-10-10 @ 16:08
//
// Description :
//
// $Rev History
//    2001-10-10  Module header created
//****************************************************************************
Use Working.pkg
Use SyncFuncs.pkg

#IFNDEF clGreenGrey
Define clGreenGrey      for (RGB(64, 84, 93))
Define clGreenGreyLight for (RGB(7, 117, 104))
#ENDIF

Register_Object oCurrentColumn_fm
Register_Object oFieldType_fm
Register_Object oFieldLength_fm
Register_Object oNext_bn
Register_Object oClose_bn
Register_Object oFirst_bn

Class cDynamicReadOnlyGrid is a Grid

    Procedure Construct_Object
        Handle ho
        Integer iColor
        Forward Send Construct_Object
        Property Handle  phoFieldArray
        Property Integer piOffset    5
        Property Integer piMaxCols   6
        Property Integer piColWidth 80
        Property Integer piFile      0
        Property Integer piPaintCol -1
        Property Integer piIndex    -1
        Property String  psMoveValueOut ""
        Property Boolean pbMultiType False  // False = Only display ASCII fields. Else; Ascii, Numeric and Date fields.
        Property Boolean pbCheckAnsi True   // If Auto Ansi check should be done at all while filling grid data.
        Property Boolean pbFirstAnsi True   // Only display Ansi check once on each popup and display info_box
        Property Boolean pbAnsi      False  // Was an ANSI value found?
        Property Boolean pbFirst     True   // So that no check on record exists during first fill is performed.
        Property Boolean pbHeaderWidth True
        Property Boolean pbSQLTable False
        
        Set AutoSize_Height_State   to False
        Set Select_Mode             to No_Select
//        Set Highlight_Row_state     to True
//        Get ReadDWord of ghoApplication "Preferences" "CurrentRowColor" clAqua to iColor
//        Set CurrentRowColor to clAqua //iColor
//        Get ReadDWord of ghoApplication "Preferences" "CurrentCellColor" clYellow to iColor
//        Set CurrentCellColor to iColor
        Set Highlight_Row_State     to True
//        Get ReadDWord of ghoApplication "Preferences" "CurrentRowColor" clAqua to iColor
        Set CurrentRowColor         to clGreenGreyLight //clAqua 
//        Get ReadDWord of ghoApplication "Preferences" "CurrentCellColor" clYellow to iColor
        Set CurrentCellColor        to clGreenGreyLight //iColor
        Set CurrentRowTextColor     to clWhite
        Set Size to 10 10
        Set Line_Width to 3 0

        Get Create (RefClass(Array)) to ho
        Set phoFieldArray  to ho

        On_Key kEnter           Send DoMoveValueOut
        On_Key Key_Home         Send Home
        On_Key Key_End          Send End
        On_Key Key_PgDn         Send NextSet
        On_Key Key_PgUp         Send FirstSet
        On_Key Key_Tab          Send Switch
        On_Key Key_F6           Send Switch
        On_Key Key_Shift+Key_F6 Send Switch_Back
    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object
    End_Procedure
    
    Procedure Mouse_Click Integer iWin Integer iChar
        Forward Send Mouse_Click iWin iChar
        Send DoMoveValueOut
    End_Procedure

    Procedure DoCreateColumns
        Handle hoArray
        Boolean bMultiType bOk bHeaderWidth
        Integer iFile iMaxCols iCount iColCount iColWidth
        Integer iFields iType iLength iOffset iStart iIndex
        String sFieldName sText sDriver
    
        Move (phoFieldArray(Self)) to hoArray
        Send Delete_Data   of hoArray // Delete old items.
        Send Delete_Data
        Get piFile         to iFile
        Get piIndex        to iIndex
        If (not(iFile)) Begin
            Error DfErr_Program "piFile has not been specified."
            Procedure_Return
        End
    
        Get piMaxCols      to iMaxCols
        Get piColWidth     to iColWidth
        Get piOffset       to iOffset
        Get pbMultiType    to bMultiType
        Get pbHeaderWidth  to bHeaderWidth
    
        Get_Attribute DF_FILE_DRIVER          of iFile to sDriver
        Get_Attribute DF_FILE_NUMBER_FIELDS   of iFile to iFields
        If (Uppercase(sDriver) = DATAFLEX_ID) Begin
            Move 0 to iStart
        End
        Else Begin
            Move 1 to iStart
        End
        Clear iFile
    
        For iCount from iStart to iFields
            Get_Attribute DF_FIELD_NAME   of iFile iCount to sFieldname
            Get_Attribute DF_FIELD_TYPE   of iFile iCount to iType
            Get_Attribute DF_FIELD_LENGTH of iFile iCount to iLength
            If bHeaderWidth Begin
                Get Text_Extent sFieldname to iLength
            End
            Else Begin
                If (iType = DF_ASCII) Begin
                    Move (Repeat("d", iLength)) to sText
                    Get Text_Extent sText to iLength
                End
            End
    
            Move (Low(iLength)) to iLength
            Move (False)        to bOk
            If (bMultiType and (iType = DF_ASCII or iType = DF_BCD or iType = DF_DATE)) Begin
                Move (True) to bOk
            End
            Else If (not(bMultiType) and iType = DF_ASCII) Begin
                Move (True) to bOk
            End
    
            If bOk Begin
                Get UpperFirstChar sFieldName to sFieldName
                If (iLength < iColWidth + iOffset) Begin
                    Set Form_Width Item iColCount to (iLength + iOffset)
    
                End
                Else Begin
                    Set Form_Width Item iColCount to iColWidth
                End
                Set Header_Label Item iColCount to sFieldName
                Set Array_Value of hoArray Item (Item_Count(hoArray)) to iCount
                Increment iColCount
                Set Line_Width  to (iColCount + 1)
                Set Matrix_Size to (iColCount + 1)
            End
        Loop
    
        Set Line_Width  to iColCount 0
        Set Matrix_Size to iColCount 0
        Send Ignore_Error of Error_Info_Object 12292
        Move False to Err
        Clear iFile
        Vfind iFile iIndex Ge
        Set pbFirst to True
        Send Trap_Error of Error_Info_Object 12292
    End_Procedure
    
    Function CreateColumns Returns Integer
        Move False to Err
        Send DoCreateColumns
        Function_Return (Line_Size(Self))
    End_Function

Function IsMoreData Returns Integer
        Boolean bFound
        Integer iFile iIndex
        //    Constrained_Find Next
        Get piFile  to iFile
        Get piIndex to iIndex
        Vfind iFile iIndex Gt
        Move (Found) to bFound
        If bFound Begin
            Vfind iFile iIndex Lt
        End
        Function_Return bFound
    End_Function
    
    Procedure DoFillData
        Handle hoArray
        Integer iFile iField iCount iColCount iFieldCount iMaxItems iCrnt iCol
        Integer iLength iCount2 iRetval iIndex
        String sValue sChar sCompValue
        Boolean bAnsi
    
        If (pbFirst(Self) = False) Begin
            Get IsMoreData to iCount
            Set Enabled_State of oNext_bn to iCount
            If (not(iCount)) Begin
                Send Info_Box "Reached end of data. No more records to display."
                Procedure_Return
            End
        End
        Set pbFirst to False                           // Has been set to True in DoCreateColumns.
    
        Move (phoFieldArray(Self)) to hoArray
        Get piFile                 to iFile
        Get piIndex                to iIndex
        Get Current_Item           to iCrnt            // to restore current item after record finds.
        // Change logic to create, fill data after displayed on screen:
        //    Get Matrix_Size xxx
        Get Line_Size              to iColCount
        Get Display_Size           to iMaxItems
        Get piPaintCol             to iCol
        Set Dynamic_Update_State   to False
        Send Delete_Data            // Delete old items.
        Send Ignore_Error of Error_Info_Object 14 // Please enter a number
    
        Repeat
            If (not(Found)) Break      // We're done.
            For iCount from 0 to (iColCount -1)
                Get Integer_Value of hoArray Item iCount to iField
                Get_Field_Value iFile iField             to sValue
                Move (Trim(sValue))                      to sValue
                If (not(pbMultiType(Self)) and not(bAnsi) and pbCheckAnsi(Self) and pbFirstAnsi(Self)) Begin
                    Move (Length(sValue)) to iLength
                    If (iLength > 0) Begin
                        Move sValue to sCompValue
                        For iCount2 from 1 to iLength
                            Move (Left(sCompValue, 1)) to sChar
                            Move (Replace(sCompValue, sChar, "")) to sCompValue
                            If (Ascii(sChar) > 168) Begin
                                Move (True) to bAnsi // Not 127!
                            End
                            If bAnsi Break
                        Loop
                    End
                End
    
                Send Add_Item msg_None sValue
                Set Entry_State Item iFieldCount to False
                If (iCol > -1 and (iCol = iCount)) Begin
                    Set ItemColor     Item iFieldCount to clMenu
                    Set ItemTextColor Item iFieldCount to clWindowText
                End
                Increment iFieldCount
            Loop
    
            Vfind iFile iIndex Gt
            If (iFieldCount = iMaxItems) Break          // Then all grid items has been filled.
        Until (not(Found))
    
        Send Trap_Error of Error_Info_Object 14 // Please enter a number
        Set Enabled_State of oNext_bn to (Found)
        If (iCol > 0) Begin
            Move iCol to iCrnt
        End
        Set Current_Item to iCrnt                     // Reset current item to what it was before finding records.
        Set Dynamic_Update_State to True
        Send Paint
        If (not(pbMultiType(Self)) and pbCheckAnsi(Self) and pbFirstAnsi(Self)) Begin
            If bAnsi Begin
                Send Info_Box ("An ANSI value has been found and so data probably has been saved in ANSI format for this table.")
                Set pbFirstAnsi to False
            End
            Else Begin
                Get YesNo_Box ("No ANSI values have been found. Either the data for this table has been saved in OEM format or you need to run the OEM/ANSI check on the next set of data. Do you want to be able to check with further data?") to iRetval
                If (iRetval = MBR_Yes) Begin
                    Set pbFirstAnsi to True
                End
                Else Begin
                    Set pbFirstAnsi to False
                End
            End
        End
    End_Procedure

    Procedure Set Current_Item Integer iItem
        Handle hoArray
        Integer iCol iField iFile iType iLength iPrec
        String sType
        Forward Set Current_Item to iItem
        Move (phoFieldArray(Self)) to hoArray
        Get Current_Col to iCol
        Get Integer_Value of hoArray Item iCol to iField
        Get piFile      to iFile
        Get_Attribute DF_FIELD_TYPE      of iFile iField to iType
        Get_Attribute DF_FIELD_LENGTH    of iFile iField to iLength
        Get_Attribute DF_FIELD_PRECISION of iFile iField to iPrec
        If (iType = DF_BCD) Begin
            Move (iLength - iPrec) to iLength
        End
        Get FieldType iType to sType
        If (oCurrentColumn_fm(Self)) Begin
            Set Value of oCurrentColumn_fm to iField
        End
        If (oFieldType_fm(Self)) Begin
            Set Value of oFieldType_fm     to sType
        End
        If (oFieldLength_fm(Self)) Begin
            Set Value of oFieldLength_fm   to (String(iLength) + "," + String(iPrec))
        End
    End_Procedure
    
    Procedure NextSet
        Send StartWorkingMessage "Fetching next set of data..."
        Send DoFillData
        Send StopWorkingMessage
    End_Procedure
    
    Procedure FirstSet
        Integer iFile iIndex
        Get piFile  to iFile
        Get piIndex to iIndex
        If iFile Begin
            Send StartWorkingMessage "Fetching first set of data..."
            Clear iFile
            Vfind iFile iIndex Gt
            Set pbFirst to True
            Send DoFillData
            Send StopWorkingMessage
        End
    End_Procedure

    Procedure Home
        Integer iCol iCrnt
        Get Current_Col  to iCol
        Get Current_Item to iCrnt
        Set Current_Item to (iCrnt - iCol)
    End_Procedure
    
    Procedure End
        Integer iCol iCrnt iCols
        Get Current_Col  to iCol
        Get Line_Size    to iCols
        Get Current_Item to iCrnt
        Set Current_Item to (iCrnt - iCol + iCols -1)
    End_Procedure
    
    Procedure DoMoveValueOut
        Handle hoFocus
        Integer iPaintCol iCol iCrnt iItem
        String sValue
        Move (Focus(Desktop)) to hoFocus
        If (hoFocus <> Self) Begin
            Set psMoveValueOut to ""
            If (hoFocus = (oClose_bn(Self))) Begin
                Send KeyAction of oClose_bn
            End
            If (hoFocus = (oFirst_bn(Self))) Begin
                Send KeyAction of oFirst_bn
            End
            If (hoFocus = (oNext_bn(Self))) Begin
                Send KeyAction of oNext_bn
            End
            Procedure_Return
        End
        Get piPaintCol to iPaintCol
        If (iPaintCol < 0) Begin
            Send KeyAction of oNext_bn
            Procedure_Return
        End
        Get Current_Item to iCrnt
        Get Current_Col  to iCol
        If (iCol = iPaintCol) Begin
            Move iCrnt to iItem
        End
        Else If (iCol < iPaintCol) Begin
            Move (iCrnt + (iPaintCol - iCol)) to iItem
        End
        Else If (iCol > iPaintCol) Begin
            Move (iCrnt - (iCol - iPaintCol)) to iItem
        End
        Get Value Item iItem to sValue
        Set psMoveValueOut   to (Trim(sValue))
        Send Close_Panel
    End_Procedure

    // HOW SHOULD THIS BE HANDLED IF THERE'S ONLY MULTI-SEGMENT INDEXES, OR NO INDEX DEFINED???
    // Example: See IBM DB2 "SAMPLE" DATABASE; TABLE "SALES"
    //
    // This can be called for CLI drivers to auto set the file record
    // identity.
    // It will set the piIndex property to -1 if a unique record identifier was found
    // Else it sets piIndex to the index with the least number of index segments.
    Procedure DoSetPrimaryIndex Integer iFile
        Integer iField iIndexes iCount iSegments iIndex iLowSegments iFields iType
        Boolean bSQLTable bSystemTable
        
        // If system table and SQL, we need to create a temporary index.
        Get pbSQLTable to bSQLTable  
        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of iFile to iIndex
        If (bSQLTable = True and iIndex = 0) Begin
            Create_Index iFile at iIndex 
            Set_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iIndex to 1
            Set_Attribute DF_INDEX_SEGMENT_FIELD   of iFile iIndex 1 to 1   
            Set piIndex to iIndex
            Procedure_Return
        End                 
        
        Get_Attribute DF_FILE_RECORD_IDENTITY of iFile to iField
        If (iField > 0) Begin
            Get_Attribute DF_FIELD_INDEX of iFile iField to iIndex
            If (bSQLTable = True and iIndex = 0) Begin
                Move 1 to iIndex
            End
        End
    
        If (iField <= 0)  Begin
            Move 100 to iLowSegments  // Just a high number
            Get_Attribute DF_FILE_LAST_INDEX_NUMBER of iFile to iIndexes
            For iCount from 1 to iIndexes
                Get_Attribute DF_INDEX_NUMBER_SEGMENTS of iFile iCount to iSegments
                If (iSegments = 1) Break
                If (iSegments < iLowSegments) Begin
                    Move iCount to iIndex // Index with the lowest number of index segments
                    Move iSegments to iLowSegments
                End
            Loop
    
            If (iSegments = 1) Begin
                Get_Attribute DF_INDEX_SEGMENT_FIELD of iFile iCount 1 to iField
                Get_Attribute DF_FIELD_INDEX         of iFile iField   to iIndex
            End
            Else Begin
                Get_Attribute DF_FILE_NUMBER_FIELDS of iFile to iFields
                For iCount from 1 to iFields
                    Get_Attribute DF_FIELD_TYPE of iFile to iType
                    If (iType = DF_BCD) Break
                Loop
                Move iCount to iField
            End
            Set_Attribute DF_FILE_RECORD_IDENTITY of iFile to iField
        End
        Set piIndex to iIndex
    End_Procedure

End_Class
