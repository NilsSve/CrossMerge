//****************************************************************************
// $Module type: Package
// $Module name: cCJSyncTableCheckBoxGrid.pkg
//
// $Author     : Nils Svedmyr, RDC Tools International.
// Copyright (c) 2018 RDC Tools International
// E-mail      : support@rdctools.com
// Web-site    : http://www.rdctools.com
//
// Created     : 2018-12-17 @ 08:04 (Military date format - Year-Month-Day)
//
// Note        : Grid class that uses a checkbox column for selecting items.
//
// The code is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// This is free software; you can redistribute it and/or modify it under the terms of the
// GNU Lesser General Public License - see the "GNU Lesser General Public License.txt"
// in the help folder for more details.
//
//****************************************************************************
Use cCJGrid.pkg
Use cCJGridColumn.pkg
Use cCJGridColumnRowIndicator.pkg
Use cCJCommandBarSystem.pkg
Use Cursor.pkg
Use vWin32fh.pkg

Declare_Datafile SncSys

#IFNDEF clGreenGrey
    Define clGreenGrey      for (RGB(64, 84, 93))
    Define clGreenGreyLight for (RGB(7, 117, 104))
#ENDIF
#IFNDEF CS_Settings
    Define CS_Settings for "Settings"
#ENDIF
#IFNDEF CS_GridRowBackgroundColor
    Define CS_GridRowBackgroundColor for "GridRowBackgroundColor"
#ENDIF

#IFNDEF _struct_tsGridContent
Struct tsGridContent 
    Integer iSncTableID
    Boolean bSelected
    String sName
    String sDescription
    Boolean bDeleteSource
    Boolean bDeleteTarget 
End_Struct
#ENDIF

Enum_List
    Define cx_Select_All
    Define cx_Select_None
    Define cx_Select_Invert
End_Enum_List

// CmBuilder view general purpose action message.
Register_Procedure DisplaySncTableIDRecord Integer iID
Register_Function pbSynchSetup Returns Boolean  
Register_Function pbShowAddFolderMenuItem Returns Boolean
Register_Function pbShowRemoveFolderMenuItem Returns Boolean

// Classes used by the cCJSyncTableCheckBoxGrid Class
Class cCJDisplaySyncRecordMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set psCaption to "Show current record"
        Set psImage to "ActionPrompt.ico"
        Set psShortcut to "Double-click"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
        Send ShowCurrentSncTableRecord
    End_Procedure

End_Class

Class cCJSyncToggleSelectMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set psCaption to "Toggle Current Item"
        Set psImage to "ToggleOn.ico"
        Set psShortcut to "Space-Bar"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
        Send ToggleCurrentItem
    End_Procedure

End_Class

Class cCJSyncSelectAllMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set pbControlBeginGroup to True
        Set psCaption to "Select All"
        Set psImage to "SelectAll.ico"
        Set psShortcut to "Ctrl+A"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
        Set SelectItems to cx_Select_All
    End_Procedure

End_Class

Class cCJSyncDeSelectAllMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set psCaption to "Select None"
        Set psImage to "SelectNone.ico"
        Set psShortcut to "Ctrl+N"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
        Set SelectItems to cx_Select_None
    End_Procedure

End_Class

Class cCJSyncInvertSelectionsMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set psCaption to "Invert Selection"
        Set psImage to "SelectInvert.ico"
        Set psShortcut to "Ctrl+I"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
        Set SelectItems to cx_Select_Invert
    End_Procedure

End_Class

Class cCJSyncAddFolderMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set psCaption to "Add Folder"
        Set psImage to "AddFolder.ico"
        Set psShortcut to "Ins"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
    End_Procedure

End_Class

Class cCJSyncRemoveItemMenuItem is a cCJMenuItem

    Procedure Construct_Object
        Forward Send Construct_Object
        Set psCaption to "Remove From Grid"
        Set psImage to "ActionDelete.ico"
        Set psShortcut to "Del"
    End_Procedure

    Procedure OnExecute Variant vCommandBarControl
        Forward Send OnExecute vCommandBarControl
        Send Request_Delete
    End_Procedure

End_Class

Class cCJSyncContext_mnu is a cCJContextMenu
    Procedure Construct_Object
        Handle hoMenuItem   
        Boolean bCMBuilderMode
        Forward Send Construct_Object

        Get pbCMBuilderMode of ghoApplication to bCMBuilderMode
        If (bCMBuilderMode = True) Begin
            Get Create (RefClass(cCJDisplaySyncRecordMenuItem)) to hoMenuItem
        End
        Get Create (RefClass(cCJSyncToggleSelectMenuItem))      to hoMenuItem
        Get Create (RefClass(cCJSyncSelectAllMenuItem))         to hoMenuItem
        Get Create (RefClass(cCJSyncDeSelectAllMenuItem))       to hoMenuItem
        Get Create (RefClass(cCJSyncInvertSelectionsMenuItem))  to hoMenuItem
        If (pbShowAddFolderMenuItem(Self) = True) Begin
            Get Create (RefClass(cCJSyncAddFolderMenuItem))  to hoMenuItem
            Set pbControlBeginGroup of hoMenuItem to True
        End
        If (pbShowRemoveFolderMenuItem(Self) = True) Begin
            Get Create (RefClass(cCJSyncRemoveItemMenuItem))  to hoMenuItem
            If (pbShowAddFolderMenuItem(Self) = False) Begin
                Set pbControlBeginGroup of hoMenuItem to True
            End
        End
    End_Procedure

End_Class

Class cCJSyncTableCheckBoxColumn is a cCJGridColumn

    Procedure Construct_Object

        Forward Send Construct_Object
                
        Set piCheckboxCol to Self
        Set piWidth to 60
        Set pbResizable to False
        Set psCaption to "Select"
        Set psToolTip to "Select an item by using the space bar or click with the mouse."
        Set pbCheckbox to True
        Set peHeaderAlignment to xtpAlignmentCenter
        Set peFooterAlignment to xtpAlignmentCenter
        Set peDataType to Mask_Numeric_Window   
        
    End_Procedure             
    
End_Class
Use cRDCCJGrid.pkg

Class cCJSyncTableCheckBoxGrid is a cRDCCJGrid // cCJGrid
    
    Procedure Construct_Object
        Forward Send Construct_Object

        Property Handle piCheckboxCol  0
        Property Handle piCheckboxCol2 0
        Property Handle piCheckboxCol3 0

        // This must be set manually in the grid column object for the 'data' column (or one of them):
        Property Handle phoDataCol 0
        Property Handle phoDescriptionCol 0   
        Property Handle phoIDCol 0
        
        Property Boolean pbShowAddFolderMenuItem False
        Property Boolean pbShowRemoveFolderMenuItem False
        Property Boolean pbEnableMoveKeys False

        Property Handle phoDD 0
        Property Boolean pbAllowAutoDelete SncSys.AllowAutoDelete
        Property Boolean pbAllowTblChange  SncSys.AllowTblChange
        Property Boolean pbSynchSetup False

//        Set pbRestoreLayout to True
//        Set psLayoutSection to (Name(Self) + "_grid")
//        Set psNoItemsText to "No data found..."
        Set pbHeaderReorders to True
        Set pbHeaderPrompts to False
        Set pbHeaderTogglesDirection to True
        Set pbSelectionEnable to True
        Set pbAllowInsertRow to False
        Set pbAllowAppendRow to False
        Set pbShowRowFocus to True
        Set pbShowFooter to True
        Set pbMultipleSelection to True
        Set pbHotTracking to True
        Set pbEditOnClick to True
        Set Status_Help to "Select with the spacebar"
//        Set pbUseAlternateRowBackgroundColor to True
//        Set peAnchors to anAll
//        Set peVisualTheme to xtpReportThemeVisualStudio2012Light

        #IF (!@ > 180)
            #IF (!@ < 230)
//                Set peVisualTheme to xtpReportThemeExplorer
                Set peVisualTheme to xtpReportThemeOffice2016 
            #ELSE
                Set peVisualTheme to xtpGridThemeOffice2016 
            #ENDIF
        #ENDIF


        On_Key Key_Space      Send ToggleCurrentItem
        On_Key Key_Ctrl+Key_A Send SelectAll
        On_Key Key_Ctrl+Key_N Send SelectNone
        On_Key Key_Ctrl+Key_I Send SelectInvert
        On_Key kCancel        Send CancelIfPopupObject
//        On_Key Key_Delete     Send Request_Delete
//        On_Key Key_Alt+Key_Down_Arrow Send MoveDown
//        On_Key Key_Alt+Key_Up_Arrow   Send MoveUp
    End_Procedure

    Procedure End_Construct_Object
        String sColor
        Handle hoContextMenu

//        Get ReadString of ghoApplication CS_Settings CS_GridRowBackgroundColor clGreenGreyLight to sColor
//        If (sColor = "clBlueGreyLight") Begin
//            Move "clGreenGreyLight" to sColor
//        End
//        Set piSelectedRowBackColor to sColor
//        Set piHighlightBackColor   to sColor

        Get Create (RefClass(cCJSyncContext_mnu)) to hoContextMenu
        Set phoContextMenu to hoContextMenu
        
        Forward Send End_Construct_Object
    End_Procedure

    Procedure MoveUp
        tDataSourceRow[] TheData
        tDataSourceRow TheRow
        Handle hDataSource
        Integer iCurrentRow

        If (pbEnableMoveKeys(Self) = False) Begin
            Procedure_Return
        End
        Get phoDataSource to hDataSource
        Get DataSource of hDataSource to TheData
        Get SelectedRow of hDataSource to iCurrentRow
        If (iCurrentRow > 0) Begin
            Move TheData[iCurrentRow - 1] to TheRow
            Move TheData[iCurrentRow] to TheData[iCurrentRow - 1]
            Move TheRow to TheData[iCurrentRow]
            Send ReInitializeData TheData True
            Send MoveToRow (iCurrentRow - 1)
        End
    End_Procedure

    Procedure MoveDown
        tDataSourceRow[] TheData
        tDataSourceRow TheRow
        Handle hDataSource
        Integer iCurrentRow

        If (pbEnableMoveKeys(Self) = False) Begin
            Procedure_Return
        End
        Get phoDataSource to hDataSource
        Get DataSource of hDataSource to TheData
        Get SelectedRow of hDataSource to iCurrentRow
        If ((iCurrentRow + 1) < SizeOfArray(TheData)) Begin
            Move TheData[iCurrentRow] to TheRow
            Move TheData[iCurrentRow + 1] to TheData[iCurrentRow]
            Move TheRow to TheData[iCurrentRow + 1]
            Send ReInitializeData TheData True
            Send MoveToRow (iCurrentRow + 1)
        End
    End_Procedure

    Procedure CancelIfPopupObject
        Boolean bIsInPopupObject
        Delegate Get Popup_State to bIsInPopupObject
        If (bIsInPopupObject = True) Begin
            Send Close_Panel
        End
    End_Procedure

    Procedure OnCreateGridControl
        Handle hoObject
        Integer iToolTipStyle
        Boolean bIsBalloonStyleSupported

        Forward Send OnCreateGridControl

        Get phoToolTipContext to hoObject
        If (hoObject <> 0) Begin
            Move xtpToolTipStandard to iToolTipStyle
            // Baloon tooltip style requires IE 5.0 or later, so check if installed.
            // The ComShowTitleAndDescription also requires IE 5.0.
            Get ComIsBalloonStyleSupported of hoObject to bIsBalloonStyleSupported
            If (bIsBalloonStyleSupported = True) Begin
                Send ComShowTitleAndDescription of hoObject True xtpToolTipIconInfo
            End
            Set ComStyle             of hoObject to iToolTipStyle
            Set ComShowOfficeBorder  of hoObject to True
            Set ComShowShadow        of hoObject to True
            // Set the max width for a tooltip. 250 just seems to be a good
            // compromise. After 250 pixels the text will wrap to the next line automatically.
            Set ComMaxTipWidth       of hoObject to 250 // In pixels
        End

        If (pbSynchSetup(Self) = False and pbAllowTblChange(Self) = False) Begin
            Set pbReadOnly to True
            Set pbEditable of (piCheckboxCol(Self)) to False
        End
    End_Procedure

    Procedure AddItem String sName String sDescription
        Handle hoDataSource
        tDataSourceRow[] TheData
        Integer iSize iCheckboxCol iDataCol iDescCol

        If (not(IsComObjectCreated(Self))) Begin
            Procedure_Return
        End

        Get piColumnId of (piCheckboxCol(Self))     to iCheckboxCol
        Get piColumnId of (phoDataCol(Self))        to iDataCol
        Get piColumnId of (phoDescriptionCol(Self)) to iDescCol
        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Move (SizeOfArray(TheData)) to iSize
        Move False        to TheData[iSize].sValue[iCheckboxCol]
        Move sName        to TheData[iSize].sValue[iDataCol]
        Move sDescription to TheData[iSize].sValue[iDescCol]

        Send ReInitializeData TheData False
        Send MoveToFirstRow
    End_Procedure

    Procedure BrowseForFolder
        String sFolderName
        Get vSHBrowseForFolder "Select Folder to Add" to sFolderName
        If (sFolderName <> "") Begin
            Send AddItem sFolderName
        End
    End_Procedure

    // We don't want columns to be editable. But setting
    // pbEditable = False or pbReadOnly makes it very hard to read,
    // and makes it impossible to select the checkbox column with the mouse.
    // So we disable those columns instead.
    Function CanEditColumn Integer iCol Returns Boolean
        Handle hoCol
        Boolean bRetval

        Forward Get CanEditColumn iCol to bRetval

        Get piColumnId of (piCheckboxCol(Self)) to hoCol
        If (iCol <> hoCol) Begin
            Move False to bRetval
        End
        Else Begin
            Move True to bRetval
        End

        Function_Return bRetval
    End_Function

    Procedure Request_Clear_All
        tDataSourceRow[] EmptyData
        Handle hoGrid hoDataSource

        Move Self  to hoGrid
        If (IsComObjectCreated(hoGrid)) Begin
            Get phoDataSource of hoGrid to hoDataSource
            Send InitializeData of hoGrid EmptyData
            Send DoSetCheckboxFooterText
        End
    End_Procedure

    { EnumList="cx_Select_All, cx_Select_None, cx_Select_Invert" }
    // Set checkboxes of the first column as selected.
    // iState can be one of the following:
    // cx_Select_All, cx_Select_None or cx_Select_Invert
    Procedure Set SelectItems Integer iState
        Integer iCount iSize iCheckboxCol
        Boolean bChecked
        Handle hoDataSource
        tDataSourceRow[] TheData

        Get piColumnId of (piCheckboxCol(Self)) to iCheckboxCol
        Get phoDataSource               to hoDataSource
        Get DataSource of hoDataSource  to TheData
        Move (SizeOfArray(TheData))     to iSize
        Decrement iSize
        For iCount from 0 to iSize
            Case Begin
                Case (iState = cx_Select_All)
                    Move True to TheData[iCount].sValue[iCheckboxCol]
                    Case Break
                Case (iState = cx_Select_None)
                    Move False to TheData[iCount].sValue[iCheckboxCol]
                    Case Break
                Case (iState = cx_Select_Invert)
                    Move TheData[iCount].sValue[iCheckboxCol] to bChecked
                    Move (not(bChecked)) to TheData[iCount].sValue[iCheckboxCol]
                    Case Break
            Case End
        Loop

        Send ReInitializeData TheData False
        Send DoSetCheckboxFooterText 
        Set Changed_State of (phoDD(Self)) to True
    End_Procedure

    // Pass a row integer value (zero based).
    // Returns a boolean True/False weither the Checkbox column
    // is selected or not.
    Function IsSelected Integer iRow Returns Boolean
        Integer iCheckboxCol
        Handle hoDataSource
        tDataSourceRow[] TheData
        Boolean bChecked

        Get piColumnId of (piCheckboxCol(Self)) to iCheckboxCol

        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Move TheData[iRow].sValue[iCheckboxCol] to bChecked

        Function_Return bChecked
    End_Function

    Function IDValue Integer iRow Returns Integer
        Integer iIDCol iSncTableID
        Handle hoDataSource
        tDataSourceRow[] TheData

        Get piColumnId of (phoIDCol(Self)) to iIDCol

        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Move TheData[iRow].sValue[iIDCol] to iSncTableID

        Function_Return iSncTableID
    End_Function

    Procedure ShowCurrentSncTableRecord
        Handle hDataSource
        tDataSourceRow[] TheData
        Integer iRow iID

        If (pbSynchSetup(Self) = False) Begin
            Procedure_Return
        End
        
        Get phoDataSource to hDataSource
        Get DataSource of hDataSource to TheData
        Get SelectedRow of hDataSource to iRow

        Get IDValue iRow to iID
        If (iID <> 0) Begin
            Send DisplaySncTableIDRecord iID    
        End
    End_Procedure

    // Returns a string with selected values for the data column (phoDataCol).
    // Example: "000010111000", where a "1" denotes a selected item.
    Function SelectedItems Returns String
        Integer iCount iItems iSize iCheckboxCol iDataCol
        String[] sDataArray
        Handle hoDataSource
        tDataSourceRow[] TheData
        Boolean bChecked
        String sTables
        
        Move "" to sTables
        Get piColumnId of (piCheckboxCol(Self)) to iCheckboxCol
        Get piColumnId of (phoDataCol(Self))    to iDataCol

        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Move (SizeOfArray(TheData)) to iItems
        Decrement iItems

        For iCount from 0 to iItems
            Move TheData[iCount].sValue[iCheckboxCol] to bChecked
            Move (sTables + String(bChecked)) to sTables
        Loop

        Function_Return sTables
    End_Function

    Procedure SelectAll
        Set SelectItems to cx_Select_All
    End_Procedure

    Procedure SelectNone
        Set SelectItems to cx_Select_None
    End_Procedure

    Procedure SelectInvert
        Set SelectItems to cx_Select_Invert
    End_Procedure

    // Returns number of items.
    Function ItemCount Returns Integer
        Integer iItems
        Handle hoDataSource
        tDataSourceRow[] TheData

        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Move (SizeOfArray(TheData)) to iItems

        Function_Return iItems
    End_Function

    // Returns number of checked items.
    Function CheckedItems Returns Integer
        Integer iCount iItems iCheckboxCol iRetval
        Handle hoDataSource
        tDataSourceRow[] TheData
        Boolean bChecked

        Get piColumnId of (piCheckboxCol(Self)) to iCheckboxCol
        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Move (SizeOfArray(TheData)) to iItems
        Decrement iItems

        For iCount from 0 to iItems
            Move TheData[iCount].sValue[iCheckboxCol] to bChecked
            If (bChecked = True) Begin
                Increment iRetval
            End
        Loop

        Function_Return iRetval
    End_Function  
    
    // Toggles the current row on/off (the checkbox)
    Procedure ToggleCurrentItem
        Boolean bChecked
        Integer iCol
        Handle hoCol hoDD

        If (pbSynchSetup(Self) = False and pbAllowTblChange(Self) = False) Begin
            Procedure_Return
        End

        Get piColumnId of (piCheckboxCol(Self)) to iCol
        Get ColumnObject iCol   to hoCol
        Get SelectedRowValue    of hoCol to bChecked
        Send UpdateCurrentValue of hoCol (not(bChecked))
        Send Request_Save
        Send DoSetCheckboxFooterText
        Get phoDD to hoDD
        If (hoDD <> 0) Begin
            Set Changed_State of hoDD to True
        End
    End_Procedure

    Procedure ToggleItem Integer iRow Boolean bState
        Handle hoDataSource hoDD
        tDataSourceRow[] TheData
        Integer iSize iCheckboxCol

        If (not(IsComObjectCreated(Self))) Begin
            Procedure_Return
        End

        Get piColumnId of (piCheckboxCol(Self)) to iCheckboxCol
        Get phoDataSource to hoDataSource
        Get DataSource of hoDataSource to TheData
        Move bState to TheData[iRow].sValue[iCheckboxCol]
        Send ReInitializeData TheData False
        Get phoDD to hoDD
        If (hoDD <> 0) Begin
            Set Changed_State of hoDD to True
        End
    End_Procedure

    Procedure OnComMouseUp Short llButton Short llShift Integer llx Integer lly
        Forward Send OnComMouseUp llButton llShift llx lly
        Send Request_Save
        Send DoSetCheckboxFooterText
    End_Procedure

    Procedure DoSetCheckboxFooterText
        Integer iCol iSelected iItems
        Handle hoCol

        If ((phoDataCol(Self) = 0)) Begin
            Move 1 to iCol
        End
        Else Begin
            Get piColumnId of (phoDataCol(Self)) to iCol
        End
        Get ItemCount to iItems
        Get ColumnObject iCol to hoCol
        Get CheckedItems to iSelected
        Set psFooterText of hoCol  to ("Selected:" * String(iSelected) * "of" * String(iItems))
    End_Procedure

    // Augment to load data to the grid. Is called automatically
    // from procedure Activating
    Procedure LoadData
    End_Procedure

    // Automatically load data into the grid when activating.
    Procedure Activating
        Send Cursor_Wait of Cursor_Control
        Send LoadData
        Send Cursor_Ready of Cursor_Control
    End_Procedure

End_Class
