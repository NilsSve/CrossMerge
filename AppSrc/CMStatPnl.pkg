// StatPnl.pkg - creates the standard status_panel object.
//
//
// This is the default Status Panel object used by any of the Visual DataFlex classes that
// invoke the standard status panel. The standard has always been that the package name
// is StatPnl.pkg and the name of the object is Status_Panel. As of 12.0, there are major
// changes in the way the status panel operates The Sentinel based external status panel used in
// prior revisions has been replace with status panel that is part of the application.
// This should work much better and faster than the old sentinel based solution.
// While the way this operates has changed, the interface has not and therefore this should work
// with most applications.
//
// As of 12.0, we have added a global handle that contains the object ID of this status panel.
// This variable ghoStatusPanel can be used in place of the object name Status_Panel. This provides
// a cleaner more robust interface.
//
//
// Compatibility Note:
//
// When used in the standard way, this change will require no changes. A developer will only need to
// change their code if they've modified the sentinel program, which was a difficult thing to do.
//
// If for some reason you application will not work using this as a replacement for the old status
// panel, you've probably done something special with the old status-panel. If you don't want to
// figure out how to use the new one and you want to continue using the old one you are going to need
// to add some code to include the old status panel in your application. Add the following to your project (your src).
//
// Use StatPnl.pkg    // Make sure you load the new status panel object first. this is not optional!
// Use OldStatPnl.pkg // load the old status panel. Status_Panel is now this old object
//
// If you do this, you will lose access to the new status-panel via Status_Panel. However, you
// can still access the new object via the ghoStatusPanel handle.
//
//
// Creating your own Status Panel objects
//
// If a developer wishes to create a custom panel, they should use this package as their template.
// This panel can be visually modeled and changed any way you wish. Just save your new custom panel
// with a different file and object name and direct your status panel request to the new object.
//
// If the new panel changes the interface and updates objects that are not currently defined, you
// want to make sure you send the message ProcessEvents after you've updated the object. This allows
// the object to paint when inside of a tight loop. For example, if you wanted to add a progress
// bar (cProgressBar) you would want to Send ProcessEvents after you update the progress bar.
// e.g.
//       Procedure UpdateStatusBar
//           Send DoAdvance of oProgressBar
//           Send ProcessEvents
//       End_Procedure
//
// of course, if you use the standard interfaces in status bar and your forward send these
// messages this will be done for you.
//
// the standard Interface for status panels are:
//
// Send Initialize_StatusPanel - initializes values for caption, title & message
// Send Start_StatusPanel      - start the status panel
// Send Stop_StatusPanel       - stop the status panel
// Send Update_StatusPanel     - update the status panel's action area
// Get  Check_StatusPanel      - check for cancel (if cancel or pbCancel is set, close the panel)
//
// Get/Set Caption_Text - updates the caption bar
// Get/Set Title_Text   - updates the title area
// Get/Set Message_Text - updates the Message area
// Get/Set Action_Text  - updates the action area
// Get/Set Button_Text  - updates the button area
//
// Get/Set Allow_cancel_state - determines if panel can be canceled
// Send EnableCancelButton - code you should provide to enable/disable cancel button
//
// ghoStatusPanel - global handle that points to the standard status panel.

Use cProcessStatusPanel.pkg
Use cAnimation.pkg
Use cProgressBar.pkg

#IFNDEF ghoProgressBar
    Global_Variable Handle ghoProgressBar
#ENDIF

Object Status_Panel is a cProcessStatusPanel
    Set Size to 152 260
    Set Border_Style to Border_Dialog

    Move Self to ghoStatusPanel // this can be used throughout the applicaton to access this object

    Object oAnimation is a cAnimation
        Set Size to 16 130
        Set Location to 5 65
        Set pbTransparent       to True
        Set pbAutoSize          to True
        Set pbActive            to True
        Set peAnimation         to AviFileCopy
    End_Object

    Object oTitleTxt is a TextBox
        Set Label to "oTitelTxt"
        Set Location to 29 10
        Set Size to 8 242
        Set Auto_Size_State to False
        Set Justification_Mode  to jMode_Center
    End_Object

    Object oMessageTxt is a TextBox
        Set Label to "oMessageText"
        Set Location to 45 10
        Set Size to 17 242
        Set Auto_Size_State to False
        Set Justification_Mode to JMode_Left
    End_Object

    Object oActionTxt is a TextBox
        Set Label to "oActionTxt"
        Set Size to 16 205
        Set Location to 67 8
        Set Auto_Size_State to False
        Set Justification_Mode to JMode_Left
    End_Object

    Object oProgress is a cProgressBar
        Move Self to ghoProgressBar
        Set Location to 87 44
        Set Size to 14 173
        Set piMinimum        to 0
        Set piMaximum        to 2000
        Set piAdvanceBy      to 1
        Set pbSmooth to True

        // For some weird reason the application skin makes the coloring of the progressbar
        // to malfunction. By telling the CodeJock SkinFramework to skip this object, the
        // color will show correctly.
        Procedure Page Integer iPageObject
            Handle hWin
            Forward Send Page iPageObject
            If (ghoSkinFramework <> 0) Begin
                Get Window_Handle to hWin
                //                Send ComRemoveWindow of ghoSkinFramework hWin
            End
        End_Procedure
    End_Object

    Object oPercentage_tb is a TextBox
        Set Location to 71 224
        Set Size     to 14 10
        //        Set Label    to "% done"
    End_Object

    Object oLicense_txt is a TextBox
        Set Label to "oLicense_txt"
        Set Location to 129 4
        Set Size to 10 289
        Set FontPointHeight to 8
        Set Auto_Size_State    to False
        Set Justification_Mode to jMode_Center
    End_Object

    Object oCopyRight is a TextBox
        Set Location to 141 4
        Set Size to 9 289
        Set FontPointHeight to 8
        Set Auto_Size_State to False
        Set Justification_Mode  to jMode_Center
        Set Label to "Copyright 2001-2025 RDC Tools International"
    End_Object

    Object oStopButton is a Button
        Set Location to 107 105
        Set Label to "Cancel"

        Procedure OnClick
            Send Close_Panel
        End_Procedure

    End_Object

    // These messages bind the standard cProcessStatusPanel interface to the actual
    // objects defined within this instance of the status panel.

    // note: all of the messages that change text should be forwarded
    // as the forwarded messages allows the panel to paint when in a tight loop

    Procedure Set Message_Text String sText
        Set Label of oMessageTxt to sText
        Forward Set Message_Text to sText
    End_Procedure

    Function Message_Text Returns String
        Function_Return (Label(oMessageTxt))
    End_Function

    Procedure Set Action_Text String sText
        Set Label of oActionTxt to sText
        Forward Set Action_Text to sText
    End_Procedure

    Function Action_Text Returns String
        Function_Return (Label(oActionTxt))
    End_Function

    Procedure Set Button_Text String sText
        Set Label of oStopButton to sText
        Forward Set Button_Text to sText
    End_Procedure

    Function Button_Text Returns String
        Function_Return (Label(oStopButton))
    End_Function

    Procedure Set Title_Text String sText
        Set Label of oTitleTxt to sText
        Forward Set Title_Text to sText
    End_Procedure

    Function Title_Text Returns String
        Function_Return (Label(oTitleTxt))
    End_Function

    Procedure Set License_Text String sText
        Set Label of oLicense_txt to sText
    End_Procedure

    // gets called when status panel is activated passing whether a button
    // should appear
    Procedure EnableCancelButton Boolean bEnable
        Set Enabled_State of oStopButton to bEnable
    End_Procedure

    Procedure Activating
        Set Action_Text  to ""
        Set pbActive of oAnimation to True
    End_Procedure

    Procedure Page Integer iPageObject
        Set piMinSize to (Hi(Size(Self))) (Low(Size(Self)) +1)
        Forward Send Page iPageObject
    End_Procedure

End_Object
