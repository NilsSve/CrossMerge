//****************************************************************************
// $Module type: Package
// $Module name: CheckDSN package
// $Author     : Nils Svedmyr
// Created     : 2001-07-05 @ 11:27
//
// Description : Checks for necessary ODBC DSN's Sources (Used with the ODBC driver)
//
// $Rev History
//    2001-07-05  Module header created
//****************************************************************************
Use ODBC_Drv.pkg            // DAC standard package.
Use Working.pkg             // Working message (instead of using the sentinel)
Use SyncFuncs.pkg

//****************************************************************************
// $Module type: CLASS
// $Module name: oDSNArray
// $Author     : Nils Svedmyr
// Created     : 2001-08-03 @ 10:25
//
// Description : To keep multiple ODBC DSN names.
//
// $Rev History
//    2001-08-03  Module header created
//****************************************************************************

Class cDSNArray is a Array
    Procedure Construct_Object
        Forward Send Construct_Object
    End_Procedure

    // Takes a string with DSN names, each surrounded with a
    // double quote ("). Returns: Number of items.
    Function LoadDSNArray String sDSN Returns Integer
        Integer iPos1 iPos2
        String sName
        Move (Trim(sDSN)) to sDSN
        Repeat
            Move (Pos('"', sDSN))                    to iPos1
            Move (Replace('"', sDSN, ''))            to sDSN
            Move (Pos('"', sDSN))                    to iPos2
            Move (Replace('"', sDSN, ''))            to sDSN
            Move (Mid(sDSN, (iPos2 - iPos1), iPos1)) to sName
            //Showln "sName = " sName " iPos1 = " iPos1 " iPos2 = " iPos2 " sDSN = " sDSN
            If (sName <> '') Begin
                Set Array_Value Item (Item_Count(Self)) to sName
            End
        Until (Not (sDSN contains '"'))
        Function_Return (Item_Count(Self))
    End_Function

    Procedure Dump
        Integer iCount iItems
        String sValue
        Get Item_Count to iItems
        Showln "DNS array object = " (Self)
        For iCount From 0 to (iItems -1)
            Get String_Value Item iCount to sValue
            Showln "DNS value = " sValue
        Loop 
        Showln ""
    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object
    End_Procedure
End_Class

// Check that necessary DSN's has been setup prior start of application:
// Input  : DSN Name and Id of the programs Panel object.
Procedure DoCheckDSNName Global String sDSN Handle hoDD Handle hoPanel
    Integer iRetval iItems iCount
    Boolean bOk
    Handle hWnd hoArray
    String sName     

// 2020-03-10 Dont' think this is necesssary. The file open logic will take care of this.
Procedure_Return
    
    Get Create (RefClass(cDSNArray)) to hoArray
    If (Active_State(Self)) Begin
        Send StartWorkingMessage "Checking ODBC Data Source Name's..."
    End
    Get LoadDSNArray of hoArray sDSN to iItems
    //Send Dump        of hoArray
    For iCount From 1 to iItems
        Get String_Value of hoArray Item (iCount - 1) to sName
        Get CheckDSNName sName hoDD to bOk
        If (bOk = False) Break
    Loop 
    Send StopWorkingMessage
    Send Destroy of hoArray
    If (bOk = False) Begin
        If (iItems = 1) Begin
            Move ("You need to have a ODBC Data Source Name named" * String(sDsn) * "on your computer to be able to run this program. Do you want to create it now with Windows ODBC Administrator?\n\n Note: If you press 'No' this program will be aborted.") to sName
        End
        Else Begin
            Move ("You need to have ODBC Data Source Name's named" * String(sDsn) * "on your computer to be able to run this program. Do you want to create them now with Windows ODBC Administrator?\n\n Note: If you press 'No' this program will be aborted.") to sName
        End
        Get YesNo_Box sName "Control Panel - ODBC Sources" to iRetval
        If (iRetval = MBR_NO) Begin
            Abort
        End
        Get Window_Handle of hoPanel to hWnd
        If (hWnd) Begin
            Call_Driver 0 ODBC_DRV_ID Function ODBC_MANAGE_DATA_SOURCES Callback 0 Passing CLI$StrDummy CLI$StrDummy !1 Result CLI$IntDummy
        End 
        Else Begin
            Send Stop_Box "Couldn't find a Window handle for the ODBC Admin Manager."
        End
            
    End
End_Procedure

// Helper function for DoCheckDSNName
// Returns: True if success
//          False if fail
Function CheckDSNName Global String sDefaultDSN Handle hoDD Returns Boolean
    Boolean bState bFrom
//    tSQLConnection SQLConnection   
//    String[] asDSNSources
    // We dont' use this no more.
    Function_Return True
        
//    Move True to bFrom
//    Get FillSQLConnectionStruct bFrom hoDD to SQLConnection
    
    // ToDo: Use DUF odbc mgr logic
    //  ODBCEnumerateDataSources iNumDSN
    //  For iCount From 1 to iNumDSN
    //    ODBCDSNName iCount to sDSNName
    //    If (Uppercase(sDSNName) contains Uppercase(sDefaultDSN)) Begin
    //        Move (True) to bState
    //    End
    //  Loop // For iCount From 1 to iNumDSN
    Function_Return bState
End_Function
