//****************************************************************************
// $Module type: CLASS
// $Module name: cSyncTableCheckboxGrid
// $Author     : Nils Svedmyr
// Created     : 2001-07-24 @ 15:41
//
// Description
//
// $Rev History
//    2001-07-24  Module header created
//****************************************************************************
Use cCheckboxColumnGrid.pkg

#IFNDEF clGreenGrey
Define clGreenGrey      for (RGB(64, 84, 93))
Define clGreenGreyLight for (RGB(7, 117, 104))
#ENDIF

Declare_Datafile SncSys
Declare_Datafile SncTable
Declare_Datafile SncSchem

Class cSyncTableCheckboxGrid is a cCheckboxColumnGrid

    Procedure Construct_Object
        Integer iColor

        Forward Send Construct_Object

        Property Handle phoDD 0
        Property Boolean pbAllowAutoDelete SncSys.AllowAutoDelete
        Property Boolean pbAllowTblChange  SncSys.AllowTblChange
        Property Boolean pbSynchSetup      False

//        Get ReadDWord of ghoApplication "Preferences" "CurrentRowColor" clAqua to iColor
//        Get ReadDWord of ghoApplication "Preferences" "CurrentCellColor" clYellow to iColor
        Set Highlight_Row_State     to True
        Set CurrentRowColor         to clGreenGreyLight  
        Set CurrentCellColor        to clGreenGreyLight 
        Set CurrentRowTextColor     to clWhite
        Set piCheckBoxColumn        to 0
        Set piCheckBoxColumn2       to 3
        Set piCheckBoxColumn3       to 4
        Set Horz_Scroll_Bar_Visible_State to False

        If (pbSynchSetup(Self)) Begin
            Set Status_Help Item 0 to "Select the items that should be belong to a Collection Name."
        End
        Else Begin
            If (pbAllowTblChange(Self)) Begin
                Set Status_Help Item 0 to "Select items to be connected, or select a Collection Name from the comboform below. The Selected column is the only one that can be changed."
            End
            Else Begin
                Set Status_Help Item 0 to "You are not allowed to change the selections. None of the columns can be changed, select a Collection name from the comboform below."
            End
        End
        Set Status_Help Item 1 to "An optional name to sort records in the Collection grid and in the Connect Engine grid. Can only be set on the 'Database Tables' tab-page."
        Set Status_Help Item 2 to "These are the tables that will be connected."
        If (piCheckBoxColumn2(Self)) Begin
            If (pbSynchSetup(Self)) Begin
                Set Status_Help Item 3 to "Auto Delete can only be changed on the Index/Sorting tab-page."
            End
            Else Begin
                If (pbAllowAutoDelete(Self)) Begin
                    Set Status_Help Item 3 to "Select to delete records in the Destination table that has been deleted in the Source table"
                End
                Else Begin
                    Set Status_Help Item 3 to "You are not allowed to change the Auto Delete state"
                End
            End
        End
    End_Procedure

    Procedure DoFillGrid
        Integer iCols iRecid iRecnum
        String sText sSort

        Get Line_Size to iCols
        Set Dynamic_Update_State to False
        Send Delete_Data
        Move SncTable.Recnum to iRecnum

        Clear SncTable
        Constraint_Set Self
        Constrain SncTable.Hide eq 0
        Constrained_Find First SncTable by Index.2
        While (Found)
            Move (Trim(SncTable.Text))      to sText
            Move (Trim(SncTable.SortField)) to sSort
            If (sText <> "") Begin
                Move SncTable.ID to iRecid
                If (iCols > 0) Begin
                    Send DoAddCheckBoxItem
                    Set Aux_Value    Item (Item_Count(Self) - 1) to iRecid
                    If (pbSynchSetup(Self)) Begin
                        Set Aux_Value    Item (Item_Count(Self) - 1) to iRecid
                    End
                    Else Begin
                        Set Shadow_State Item (Item_Count(Self) - 1) to (not(pbAllowTblChange(Self)))
                    End
                End
                If (iCols > 1) Begin
                    Send DoAddTextItem sSort
                    Set Shadow_State Item (Item_Count(Self) - 1) to False
                    Send DoAddTextItem sText
                    Set Shadow_State Item (Item_Count(Self) - 1) to False
                End

                If (piCheckBoxColumn2(Self)) Begin
                    Send DoAddCheckBoxItem
                    Set Select_State Item (Item_Count(Self) - 1) to SncTable.DeleteSourceRecords
                    Set Shadow_State Item (Item_Count(Self) - 1) to True
                End

                If (piCheckBoxColumn3(Self)) Begin
                    Send DoAddCheckBoxItem
                    Set Select_State Item (Item_Count(Self) - 1) to SncTable.Delete_Records
                    Set Shadow_State Item (Item_Count(Self) - 1) to True
                End

            End
            Constrained_Find Next
        Loop

        // Reset file buffer.
        Clear SncTable
        If iRecnum Begin
            Move iRecnum to SncTable.Recnum
            Find eq SncTable by Recnum
        End
        Set Dynamic_Update_State to True
    End_Procedure

    Procedure DoDisplayScheme String sSchemeName
        Integer iRow iItem_Count iRows iCols iPos iRecnum iCheckboxColumn2 iCheckboxColumn3
        Integer iState
        String sTables sHides

        Set Dynamic_Update_State to False
        Get Item_Count           to iItem_Count
        Get Line_Size            to iCols
        Get piCheckBoxColumn2    to iCheckboxColumn2
        Get piCheckBoxColumn3    to iCheckboxColumn3
        Move SncTable.Recnum to iRecnum
        Clear SncTable
        Constraint_Set (Self + 1)
        Constrained_Find First SncTable by Index.1
        Move "" to sHides
        While (Found)
            Move (sHides + String(SncTable.Hide)) to sHides
            Constrained_Find Next
        Loop
        Clear SncTable
        If iRecnum Begin
            Move iRecnum to SncTable.Recnum
            Find eq SncTable by Recnum
        End

        Clear SncSchem
        Move sSchemeName to SncSchem.Name
        Find Eq SncSchem by Index.1
        Move (Trim(SncSchem.Tables))  to sTables
        Move (iItem_Count / iCols)    to iRows
        If (sHides contains "1") Begin
            For iRow From 1 to iRows
                Move (Pos("1", sHides)) to iPos
                If iPos Begin
                    Move (Overstrike("|", sHides,   iPos)) to sHides
                    Move (Overstrike("|", sTables,  iPos)) to sTables
                End
            Loop
            Move (Replaces("|", sTables,  "")) to sTables
        End

        For iRow From 0 to (iRows - 1)
            Move (Mid(sTables, 1, (iRow + 1)))   to iState
            Set Select_State Item (iRow * iCols) to iState
        Loop
        Clear SncSchem
        Set Dynamic_Update_State to True
    End_Procedure

    Function SelectedItems Returns String
        Integer iItem iItem_Count iCols
        String sSelected sSncTables

        Move ""        to sSncTables
        Get Item_Count to iItem_Count
        Get Line_Size  to iCols
        For iItem From 0 to (iItem_Count - 1)
            Get Select_State Item iItem to sSelected
            Move (Append(sSncTables, sSelected)) to sSncTables
            Add (iCols -1) to iItem
        Loop
        Move (Trim(sSncTables)) to sSncTables
        Function_Return sSncTables
    End_Function

    Function SelectedDeletes Returns String
        Integer iItem iItem_Count iCols iCheckboxColumn2 iCheckboxColumn3
        String sSelected sDeletes

        Get Item_Count        to iItem_Count
        Get Line_Size         to iCols
        Get piCheckBoxColumn2 to iCheckboxColumn2
        Get piCheckBoxColumn3 to iCheckboxColumn3
        For iItem From 0 to (iItem_Count - 1)
            Get Select_State Item (iItem + iCheckboxColumn2)  to sSelected
            If (sSelected <> "0") Begin
                Move "2" to sSelected
            End
            // Only one "delete" (source or target) selection is allowed,
            // so if the first delete column is checked we don't care if the next is checked.
            Else Begin
                Get Select_State Item (iItem + iCheckboxColumn3)  to sSelected
                If (sSelected <> "0") Begin
                    Move "3" to sSelected
                End
            End
            Move (Append(sDeletes, sSelected)) to sDeletes
            Add (iCols -1) to iItem
        Loop
        Function_Return sDeletes
    End_Function

    Function NumberSelectedItems Returns Integer
        Integer iItem iItem_Count iCols iRetval
        Boolean bSelected

        Get Item_Count to iItem_Count
        Get Line_Size  to iCols
        For iItem From 0 to (iItem_Count - 1)
            Get Select_State Item iItem to bSelected
            If bSelected Begin
                Increment iRetval
            End
            Add (iCols -1) to iItem
        Loop
        Function_Return iRetval
    End_Function

    // Auto Send by End_construct_object
    Procedure DoInitGrid
        Send DoFillGrid
        Send DoDisplayScheme SncSys.Default_Scheme
    End_Procedure

    // Toggles all files on, off or invert selections.
    // iState =  1 - Select all
    //        =  0 - Deselect all
    //        = -1 - Invert select state
    Procedure DoToggleAll Integer iState
        Integer iItem_Count iCols iItem iCheckboxColumn2 iCheckboxColumn3 
        Boolean bSelected
        
        If (iState =  1) Begin
            Send StartWorkingMessage "Selecting All"
        End
        If (iState =  0) Begin
            Send StartWorkingMessage "Deselecting All"
        End
        If (iState = -1) Begin
            Send StartWorkingMessage "Inverting Selection"
        End

        Set Dynamic_Update_State to False
        Get piCheckBoxColumn2 to iCheckboxColumn2
        Get piCheckBoxColumn3 to iCheckboxColumn3
        Get Line_Size to iCols
        Get Item_Count to iItem_Count
        Decrement iItem_Count
        
        For iItem from 0 to iItem_Count
            Get Select_State Item iItem to bSelected
            If (iState = - 1) Begin
                Move (not(bSelected)) to bSelected
            End
            Else Begin
                Move (iState) to bSelected
            End
            Set Select_State Item iItem to bSelected
            If (iCheckboxColumn2 and bSelected = False) Begin
                Get Select_State Item (iItem + iCheckboxColumn2) to bSelected
                If (bSelected = True) Begin
                    Set Select_State Item (iItem + iCheckboxColumn2) to False
                End
            End
            If (iCheckboxColumn3 and bSelected = False) Begin
                Get Select_State Item (iItem + iCheckboxColumn3) to bSelected
                If (bSelected = True) Begin
                    Set Select_State Item (iItem + iCheckboxColumn3) to False
                End
            End
            Add (iCols -1) to iItem
        Loop                                          
        
        Set Dynamic_Update_State to True
        Send StopWorkingMessage
    End_Procedure

    Procedure Select_Toggling Integer iItem Integer iState
        Integer iCheckboxColumn2 iCheckboxColumn3 iCol iFirstState
        Boolean bAllowAutoDelete bSynchSetup

        Get Current_Col       to iCol
        Get Current_Item      to iItem
        Get piCheckBoxColumn2 to iCheckboxColumn2
        Get piCheckBoxColumn3 to iCheckboxColumn3
        Get pbAllowAutoDelete to bAllowAutoDelete
//        Get pbSynchSetup      to bSynchSetup

        Get Select_State Item (iItem -iCol) to iFirstState
        If (iCol = 1) Begin
            Move (iItem - 1) to iItem
        End
        If (iCol = 2) Begin
            Move (iItem - 2) to iItem
        End
        If (iCol = 3) Begin
            Move (iItem - 3) to iItem
        End
        If (iCol = 4) Begin
            Move (iItem - 4) to iItem
        End

        Forward Send Select_Toggling iItem iState
    End_Procedure

    Procedure Set pbHidden Boolean bMode
        Set Visible_State to (not(bMode))
        Set Enabled_State to (not(bMode))
        Set Focus_Mode    to (If(bMode = True, NonFocusable, Focusable))
    End_Procedure

    Function pbHidden Returns Boolean
        Function_Return (Visible_State(Self))
    End_Function

End_Class
