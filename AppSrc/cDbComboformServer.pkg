//****************************************************************************
// $Module type: Class
// $Module name: cDbComboFormServer.pkg
// $Author     : Nils Svedmyr, RDC Tools International
// Created     : 2002-07-20 @ 09:02
//
// Description :
//
// $Rev History
//    2002-07-20  Module header created
//****************************************************************************
Use cDbUpdateFunctionLibrary.pkg
Use cRDSDataDictionary.pkg
Use Dfabout.pkg
Use cRDCDbComboForm.pkg

Declare_Datafile SncTable

Class cDbComboformServerIdleHandler is a cIdleHandler
    Procedure Construct_Object
        Forward Send Construct_Object
    End_Procedure

    Procedure OnIdle
        Delegate Send DoLocalUpdate
    End_Procedure
End_Class

{ OverrideProperty=Entry_State InitialValue=False }
{ OverrideProperty=Combo_Sort_State InitialValue=True }
{ OverrideProperty=Label_Row_Offset InitialValue=0 }
{ OverrideProperty=Label_Col_Offset InitialValue=2 }
{ OverrideProperty=Label_Justification_Mode InitialValue=jMode_Right }
{ OverrideProperty=Label_Justification_Mode EnumList="jMode_Right, jMode_Left, jMode_Center" }
{ OverrideProperty=Size InitialValue=13,150 }
Class cDbComboformServer is a cRDCDbComboForm
    Procedure Construct_Object
        Forward Send Construct_Object

        { Visibility=Private }
        Property Boolean pbEnabled True
        { InitialValue=True }
        Property Handle  phoDD (Main_DD(Self))
        Property Integer piDbType EN_DbTypeDataFlex
        Property Boolean pbFrom True
        Property String[] pasServers

        Property Boolean pbAutoEnable True  
        Property Handle phoIdleHandler (Create(Self, RefClass(cDbComboformServerIdleHandler)))

        Property Handle Private.phoArray (Create(Self, RefClass(Array)))
        Set Label_Justification_Mode to jMode_Right
        Set Label_Row_Offset to 0
        Set Label_Col_Offset to 2
        Set Entry_State Item 0 to False
        Set Combo_Sort_State to True

    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object
//        Set Combo_Sort_State to True
    End_Procedure

    Procedure DoLocalUpdate
        If (pbAutoEnable(Self) = False) Begin
            Procedure_Return
        End             
        Set Enabled_State to (IsEnabled(Self))
    End_Procedure

    { MethodType=Event }
    Function IsEnabled Returns Boolean
        Boolean bFrom
        Integer iDbType
        Handle hoDD
        
        Send DoChangeLabel
        Get phoDD to hoDD
        Get pbFrom to bFrom
        If (bFrom = True) Begin
            Get Field_Current_Value of hoDD Field SncTable.FromDbType to iDbType    
        End                                                               
        Else Begin
            Get Field_Current_Value of hoDD Field SncTable.ToDbType to iDbType    
        End
//        Function_Return (iDbType <> EN_DbTypeDataFlex and iDbType <> EN_DbTypePervasive)
        Function_Return False // Don't allow to change via OnDropDown, instead use the "Edit" button.
    End_Function

    // Common message to enable/disable object:
//    Procedure DoEnableDisable Integer iDbType
//        String sValue
//        Integer iItem iFile iField
//        
//        Set piDbType to iDbType
//        Set Enabled_State to (iDbType <> EN_DbTypeDataFlex and iDbType <> EN_DbTypePervasive)
//        Send Combo_Delete_Data
//        Send DoChangeLabel
//        
//        If (Enabled_State(Self)) Begin
//            Send Combo_Add_Item CS_None
//            Get Data_File  to iFile
//            Get Data_Field to iField
//            If (not(pbGetHasCurrRowId(phoDD(Self)))) Begin
//                Move CS_None to sValue
//                Set File_Field_Changed_Value of (phoDD(Self)) iFile iField to sValue
//                Get WinCombo_Item_Matching sValue to iItem
//                If (iItem > -1) Begin
//                    Set WinCombo_Current_Item to iItem
//                End
//                Else Begin
//                    Set WinCombo_Current_Item to 0
//                End
//            End
//            Set Enabled_State to False
//        End
//    End_Procedure

    // Enable the idle handler timer when the button is activated
    Procedure Activating
        Forward Send Activating
        Set pbEnabled of (phoIdleHandler(Self)) to True
    End_Procedure

    // Disable the idle handler when the button is deactivated
    Procedure Deactivating
        Set pbEnabled of (phoIdleHandler(Self)) to False
        Forward Send Deactivating
    End_Procedure

    Procedure Refresh Integer iNotifyMode
        Forward Send Refresh iNotifyMode
        Send DoCheckClear    
    End_Procedure

    Procedure DoCheckClear
        Integer iFile iField iItem
        String sServer
        Handle hoDD
        
        Get phoDD to hoDD
        Get Data_File  Item 0 to iFile
        Get Data_Field Item 0 to iField
        Get File_Field_Current_Value of hoDD iFile iField to sServer
        If (sServer = "") Begin
            Move CS_None to sServer
        End

        Send Combo_Delete_Data
        Send Combo_Add_Item sServer
        Get WinCombo_Item_Matching sServer to iItem
        If (iItem > -1) Begin
            Set WinCombo_Current_Item to iItem
        End  
        Set Entry_State Item 0 to False
    End_Procedure

    // to change label and status help according to the
    // database format choosen:
    Procedure DoChangeLabel
        Integer iDbType iDSNType
        String sLabel sToolTip sDriverID
        Boolean bFrom   
        Handle hoDD

        If (not(Active_State(Self))) Begin
            Procedure_Return
        End

        Get piDbType to iDbType
        Get phoDD    to hoDD
        Get pbFrom   to bFrom
        If (bFrom = True) Begin
            Get Field_Current_Value of hoDD Field SncTable.FromDriver to sDriverID
        End
        Else Begin
            Get Field_Current_Value of hoDD Field SncTable.ToDriver to sDriverID
        End
        Get Label to sLabel
        
        Case Begin
            Case (sDriverID = DATAFLEX_ID)
                If (sLabel <> "Server Name") Begin
                    Set Label to "Server Name"     
                End
                Move ("Database Server name or DSN (Data Source Name)") to sToolTip
                Case Break
            Case (sDriverID = DB2_DRV_ID)
                If (sLabel <> "Data Source Name") Begin
                    Set Label to "Data Source Name"
                End
                Move ("Database source or alias name") to sToolTip
                Case Break
            Case (sDriverID = MSSQLDRV_ID)
                If (sLabel <> "Server Name") Begin
                    Set Label to "Server Name"
                End
                Move ;
                ("Name of the SQL Server. The value must be" * ;
                "either the name of a server on the network, or the name of a SQL Server" * ;
                "Client Network Utility advanced server entry. You can enter (local) or MachineName\SQLExpress if you" * ;
                "want to connect to a copy of SQL Express running on the same computer.") to sToolTip
                Case Break
            Case (sDriverID = ODBC_DRV_ID)
                If (bFrom = True) Begin
                    Get Field_Current_Value of (phoDD(Self)) Field SncTable.FromDSNType to iDSNType
                End
                Else Begin
                    Get Field_Current_Value of (phoDD(Self)) Field SncTable.ToDSNType   to iDSNType
                End
                If (iDSNType = 2) Begin
                    If (sLabel <> "Data Source File") Begin
                        Set Label to "Data Source File"
                    End
                    Move ("ODBC Data Source File Name (DSN). The path to the file is displayed in the 'Table Path:' field below.") to sToolTip
                End
                Else Begin
                    If (sLabel <> "Data Source Name") Begin
                        Set Label to "Data Source Name"
                    End
                    Move ("ODBC Data Source Name (DSN)") to sToolTip
                End
                If (iDbType = EN_DbTypeOracle) Begin
                    If (sLabel <> "Database Alias") Begin
                        Set Label to "Database Alias"
                    End
                    Move ("Database server or alias name") to sToolTip
                End
                Case Break
            Case (sDriverID = DFBTRDRV_ID)
                If (sLabel <> "Meta Database File") Begin
                    Set Label to "Meta Database File"
                End
                Move ;
                ("Meta database filename (File.ddf). Contains all Pervasive.SQL data tables for this set. Select the path to the File.ddf file with the 'Select File' button.") to sToolTip
                Case Break
            Case Else
                If (sLabel <> "Server Name") Begin
                    Set Label to "Server Name"
                End
                Set Status_Help to ("Database Server name or DSN (Data Source Name)")
                Procedure_Return
        Case End

        Set psTooltip    to sToolTip
        //        Send RefreshToolTip
        Set Status_Help  to sToolTip
        // This is needed to avoid flickering of the label object when a change has
        // occured above, while finding saved records:
        Send Page_Object of (Label_Object(Self)) True
    End_Procedure

    // Interface for the cFileDSNButton class:
//    Procedure DoFillComboAndTellDataTableCombo
//        Handle hoDD
//        Integer iFile iField
//        String sValue
//        Get phoDD to hoDD
//        Send DoComboFillList
//        Get Data_File  to iFile
//        Get Data_Field to iField
//        Get File_Field_Current_Value of hoDD iFile iField to sValue
//        Send DoUpdateDataTableCombo sValue
//    End_Procedure

//    Procedure OnCloseUp
//        Handle hoDD
//        Integer iFile iField
//        String sOldValue sNewValue
//
//        Get phoDD      to hoDD
//        Get Data_File  to iFile
//        Get Data_Field to iField
//        Get File_Field_Current_Value of hoDD iFile iField to sOldValue
//        Forward Send OnCloseUp
//        Get File_Field_Current_Value of hoDD iFile iField to sNewValue
//        If (sNewValue contains CS_None) Begin
//            If (pbFrom(Self)) Begin
//                Set Field_Changed_Value of (phoDD(Self)) Field SncTable.FromFilepath to ""
//            End
//            Else Begin
//                Set Field_Changed_Value of (phoDD(Self)) Field SncTable.ToFilePath   to ""
//            End
//        End
//        If (Trim(sOldValue) <> Trim(sNewValue)) Begin
//            Send DoUpdateDataTableCombo sNewValue
//        End
//    End_Procedure

    // A bit of optimization. When a record exist the combo is only filled with
    // the save server name. However, when the list is dropped down, we will
    // fill it with all available servers.
    Procedure OnDropDown
        Integer iDbType
        Boolean bFrom       
        Handle hoDD
        
        Get phoDD to hoDD 
        Send Refind_Records of hoDD
        Get pbFrom to bFrom
        If (bFrom = True) Begin
            Move SncTable.FromDbType to iDbType
        End
        Else Begin
            Move SncTable.ToDbType   to iDbType
        End
        If (iDbType <> EN_DbTypeDataFlex and iDbType <> EN_DbTypePervasive)  Begin
            If (Active_State(Self)) Begin
                Send StartWorkingMessage "Finding Database Servers..."
            End
            Send DoComboFillList
            Send StopWorkingMessage
        End
        Forward Send OnDropDown
    End_Procedure

    // Must be send from DDO when finding a record:
    // This will only display a previously saved server name.
    // Note: This is an optimization,
    // when the list is dropped down the list will be filled.
//    Procedure DoFindData
//        Handle hoDD
//        Boolean bChanged
//        Integer iFile iField iItem iType
//        String sValue
//
//        Get piDbType                 to iType
//        Get phoDD                    to hoDD
//        Get Data_File                to iFile
//        Get Data_Field               to iField
//        Get File_Field_Changed_State of hoDD iFile iField to bChanged
//        Get File_Field_Current_Value of hoDD iFile iField to sValue
//        Send Combo_Delete_Data
//
//        // Reset values and state. This is needed because combo_delete_data clears the DDO buffer:
//        Set File_Field_Changed_Value of hoDD iFile iField to sValue
//        Set File_Field_Changed_State of hoDD iFile iField to bChanged
//        Move (Trim(sValue))                               to sValue
//        Send Combo_Add_Item CS_None
//
//        If (Length(sValue) > 0) Begin
//            Send Combo_Add_Item sValue
//        End
//        Get WinCombo_Item_Matching sValue to iItem
//        If (iItem > -1) Begin
//            Set WinCombo_Current_Item to iItem
//        End
//        Else Begin
//            Set WinCombo_Current_Item to 0
//        End
//        Send DoUpdateDataTableCombo sValue
//    End_Procedure

//    Procedure DoUpdateDataTableCombo String sServer
//        Handle ho hoDD
//        Integer iDbType
//        Boolean bFrom
//        
//        Get pbFrom   to bFrom
//        Get phoDD    to hoDD
//        Get piDbType to iDbType
//        If (iDbType <> EN_DbTypeDataFlex and iDbType <> EN_DbTypePervasive) Begin
//            If (bFrom = True) Begin
//                Get DDObjectId hoDD SncTable.File_Number "FromDatabase" to ho // Global function in sysfuncs.pkg
//            End
//            Else Begin
//                Get DDObjectId hoDD SncTable.File_Number "ToDatabase"   to ho
//            End
//            If ho Begin
//                Send DoCheckClear of ho
//            End
//        End
//        Set Value to sServer
//    End_Procedure

    Procedure DoComboFillList
        Integer iDbType iOrgSize iSize iTmpSize iServers iCount iFile iField iItem
        Handle hoDD
        String sServer sValue sDriverID
        String[] asServers
        Boolean bFrom bRecord bChanged

        If (not(Active_State(Self))) Begin
            Procedure_Return
        End
        Move (Low(GuiSize(Self)))    to iOrgSize
        
        Get phoDD to hoDD  
        Get pbGetHasCurrRowId of hoDD to bRecord
        Get Data_File                to iFile
        Get Data_Field               to iField
        Get File_Field_Changed_State of hoDD iFile iField to bChanged
        Get File_Field_Current_Value of hoDD iFile iField to sValue
        
        Get pbFrom to bFrom
        If (bFrom = True) Begin
            Get Field_Current_Value of hoDD Field SncTable.FromDbType to iDbType
            Get Field_Current_Value of hoDD Field SncTable.FromDriver to sDriverID
        End                                                                     
        Else Begin
            Get Field_Current_Value of hoDD Field SncTable.ToDbType to iDbType
            Get Field_Current_Value of hoDD Field SncTable.ToDriver to sDriverID
        End
        
        Send Combo_Delete_Data
        // This is needed because combo_delete_data clears the DDO buffer:
        If (bRecord = False) Begin
            Set File_Field_Changed_Value of hoDD iFile iField to sValue
            Set File_Field_Changed_State of hoDD iFile iField to bChanged
        End
        
        Get SqlUtilEnumerateServers of ghoDbUpdateFunctionLibrary sDriverID to asServers
        Set pasServers to asServers
        Move (SizeOfArray(asServers)) to iServers
        If (iServers = 0) Begin
            Send Combo_Add_Item sValue
        End

        For iCount From 0 to (iServers - 1)
//            Get ServerName iCount to sServer
            Move asServers[iCount] to sServer
            Send Combo_Add_Item sServer
            Get Text_Extent sServer to iTmpSize
            If (iTmpSize > iSize) Begin
                Move iTmpSize to iSize
            End
        Loop
        If (Length(sValue) > 0) Begin
            Get WinCombo_Item_Matching sValue to iItem
            If (iItem > -1) Begin
                Set WinCombo_Current_Item to iItem
            End
        End
        If (bRecord = True) Begin
            Set Changed_State of hoDD to bChanged
        End
        If (Low(iSize) > iOrgSize) Begin
            Set ListWidth to (Low(iSize) + 20)
        End
        Else Begin
            Set ListWidth to iOrgSize
        End
        Send DoSetListWidth
    End_Procedure

//    Function EnumerateServers Integer iType Returns Integer
//        Handle hoArray ho
//        Integer iRetval iDsnType
//        String  sDriverID
//
//        Get Private.phoArray to hoArray
//        Send Delete_Data     of hoArray
//        If (pbFrom(Self)) Begin
//            Get Field_Current_Value of (phoDD(Self)) Field SncTable.FromDriver to sDriverID
//        End
//        Else Begin
//            Get Field_Current_Value of (phoDD(Self)) Field SncTable.ToDriver   to sDriverID
//        End
//
//        Get IsLoadCheckDriver sDriverID False to iRetval
//
//        Case Begin
//            Case (iType = EN_DbTypeDataFlex)
//                Case Break
//            Case (iType = EN_DbTypeDB2)
//                Send FillDB2Servers sDriverID
//                Case Break
//            Case (iType = EN_DbTypeMSSQL)
//                Send FillSQLServers sDriverID
//                Case Break
//            Case (sDriverID = ODBC_DRV_ID)
//                If (pbFrom(Self)) Begin
//                    Get Field_Current_Value of (phoDD(Self)) Field SncTable.FromDsnType to iDSNType
//                End
//                Else  Begin
//                    Get Field_Current_Value of (phoDD(Self)) Field SncTable.ToDsnType   to iDSNType
//                End
//                Send FillDSNs iDSNType sDriverID
//                Case Break
//            Case (iType = EN_DbTypePervasive)
//                Set Array_Value of ho Item (Item_Count(ho)) to "File.ddf"
//                Case Break
//            Case Else
//        Case End
//
//        Function_Return (Item_Count(Private.phoArray(Self)))
//    End_Function
//
//    Procedure FillDB2Servers String sDriver
//        Handle ho
//        String sServer sDesc
//        Integer iPos
//
//        Get Private.phoArray to ho
//        Send Delete_Data     of ho
//        Set psDriver of ghoBrowseConnect to sDriver
//        Move "" to sServer
//
//        Repeat
//            Get DataSources of ghoBrowseConnect               to sServer
//            If (Trim(sServer) <> ",") Begin
//                Move (Pos(",", sServer))                        to iPos
//                Move (Right(sServer, (Length(sServer) - iPos))) to sDesc
//                Move (Left(sServer, (iPos - 1)))                to sServer
//                Set Array_Value of ho Item (Item_Count(ho))     to (Trim(sServer))
//                
//            End
//        Until (Trim(sServer) = ",")
//
//        // ...and sort items...
//        Send Sort_Items of ho
//    End_Procedure
//
//    Procedure FillSQLServers String sDriver
//        Handle ho hoCLIHandler
//        String sServer
//        Integer iCount iNumItems
//
//        Object oMSSQLHandler is a cMSSQLHandler
//            Move Self to hoCLIHandler
//        End_Object
//
//        Get Private.phoArray to ho
//        Send Delete_Data     of ho
//
//        // ToDo: Replace with DUF
//        Get EnumerateServers of hoCLIHandler to iNumItems
//
//        For iCount From 0 to (iNumItems - 1)
//            Get String_Value of hoCLIHandler Item iCount to sServer
//            Set Array_Value of ho Item (Item_Count(ho))  to (Trim(sServer))
//        Loop
//
//        Send Destroy of hoCLIHandler
//        // ...and sort items...
//        Send Sort_Items of ho
//    End_Procedure
//
//    Procedure FillDSNs Integer iType String sDriver
//        Handle ho
//        String  sDSNName sPath
//        Integer iFile iField
//
//        Get Private.phoArray to ho
//        Get Data_File        to iFile
//        Get Data_Field       to iField
//        If (iType = 2) Begin
//            Get File_Field_Current_Value of (phoDD(Self)) iFile iField to sDSNName
//            If (pbFrom(Self)) Begin
//                Get Field_Current_Value of (phoDD(Self)) Field SncTable.FromFilePath to sPath
//            End
//            Else Begin
//                Get Field_Current_Value of (phoDD(Self)) Field SncTable.ToFilePath   to sPath
//            End
//            Set Array_Value of ho Item (Item_Count(ho))   to (Trim(sDSNName))
//            Procedure_Return
//        End
//        Else Begin
//            // ToDo: Fill with ODBC resources !
//            //            ODBCEnumerateDataSources iNumDSN iType
//            //            // First put all items in an array....
//            //            For iCount from 1 to iNumDSN
//            //                ODBCDSNName iCount to sDSNName
//            //                Set Array_Value of ho item (Item_Count(ho)) to (Trim(sDSNName))
//            //            Loop
//        End
//
//        // ...and sort items...
//        Send Sort_Items of ho
//    End_Procedure

    Function ServerName Integer iCount Returns String
        String[] asServers
        Get pasServers to asServers
        Function_Return (SizeOfArray(asServers))
    End_Function

End_Class
